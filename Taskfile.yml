# https://taskfile.dev

version: '3'

tasks:
  delve:
    aliases:
      - dlv
      - debug
      - dbg
    desc: Starts dlv debug session to attach terraform repo to.
    cmd: dlv debug --headless --continue --listen=127.0.0.1:60040 --api-version=2 --accept-multiclient -- -debug

  gen:
    aliases:
      - g
    cmd: go generate ./...
    desc: run 'go generate'

  fmt:
    cmd: go fmt ./...
    desc: Runs `go fmt ./...`

  goimports:
    aliases:
      - imp
      - imports
    desc: Runs goimports to fix imports and format code
    preconditions:
      - sh: command -v goimports >/dev/null 2>&1
        msg: "goimports not found. Install with: go install golang.org/x/tools/cmd/goimports@latest"
    cmd: goimports -w .

  build:
    aliases:
      - b
      - bld

    desc: Go Build check

    cmds:
      - defer: rm ./tempbuild
      - go build -o tempbuild

  lint:
    aliases:
      - l
      - lt
    desc: Lints project using golangci-lint
    cmd: golangci-lint run

  install:
    desc: Installs project binary in $GOBIN for local use
    aliases:
      - ins
      - i
    cmd: go install .


  test:
    desc: For running go tests, both unit and acceptance tests
    vars:
      VRBS:
        ref: .VRBS  | default "false" | regexMatch "^(?i)(true|t)$"

      GTS_FORMAT:
        sh: |
          if command -v "gotestdox" &> /dev/null; then
            echo "testdox"
          else
            echo "testname"
          fi
      FORMAT: "{{if or .VRBS .V}}{{.GTS_FORMAT}}{{else}}pkgname{{end}}"
      CTC:
        ref: .CTC | default "false" | regexMatch "^(?i)(true|t)$"
      TEST_CMD:
        sh: |
          if command -v "gotestsum" &> /dev/null; then
            echo "gotestsum --packages="./..." --format {{.FORMAT}} --hide-summary=skipped"
          else
            echo "go test{{if or .VRBS .V}} -v{{end}}"
          fi
      RUN_PATTERN:
        ref: .RUN_PATTERN | default "none"
      ACC_ONLY:
        ref: .ACC_ONLY | default "false" | regexMatch "^(?i)(true|t)$"
      ACC:
        ref: .ACC | default "false" | regexMatch "^(?i)(true|t)$"
      SWEEP:
        ref: .SWEEP | default "false" | regexMatch "^(?i)(true|t)$"
      RACE:
        ref: .RACE | default "false" | regexMatch "^(?i)(true|t)$"
      COVER:
        ref: .COVER | default "false" | regexMatch "^(?i)(true|t)$"
      COVERPROFILE:
        ref: .COVERPROFILE | default "coverage.out"
      FLAGS: "{{if .RACE}} -race{{end}}{{if .COVER}} -cover -coverprofile={{.COVERPROFILE}}{{end}}"

    dotenv:
      - .env
    env:
      TF_ACC: '{{if or .ACC .ACC_ONLY}}1{{end}}'
      GOFLAGS: '{{.FLAGS}}'

    cmds:
      - cmd: |
          {{if .CTC}}go clean -testcache{{end}}
        silent: true
      - cmd: echo "ACC set to {{or .ACC .ACC_ONLY}}, {{if or .ACC .ACC_ONLY}}running{{else}}skipping{{end}} acceptance tests."
        silent: true
      - |
        {{.TEST_CMD}} ./...
        {{- if ne .RUN_PATTERN "none"}} -run ".RUN_PATTERN"{{end -}}
        {{- if .ACC_ONLY}} -run TestAcc*{{end -}}


  test:*:

    vars:
      TYPE: '{{index .MATCH 0 | lower}}'

    requires:
      vars:
        - name: TYPE
          enum: [unit, acc, all]

    desc: Shortcut command for `task test ACC_ONLY=true`

    cmd: |
      {{if eq .TYPE "unit" -}}
        task test
      {{- else if eq .TYPE "acc" -}}
        task test ACC_ONLY=true
      {{- else if eq .TYPE "all" -}}
        task test ACC=true
      {{- else -}}
        echo 'Invalid option {{.TYPE}}'
      {{- end}}
        

  sweep:
    dotenv: [.env]
    cmd: go test ./internal/provider -test.v -args -sweep all

  docs:
    desc: Generate documentation with tfplugindocs
    aliases:
      - docs-generate
    cmds:
      - tfplugindocs generate

  license:
    desc: Apply SPDX license headers with copywrite (uses repo config)
    aliases:
      - headers
    cmds:
      - copywrite headers --config copywrite.hcl -s MPL-2.0 -c "DevOps Wiz"


  release:snapshot:
    desc: Build snapshot release artifacts with GoReleaser (no publish)
    aliases:
      - rel:snap
    preconditions:
      - sh: command -v goreleaser >/dev/null 2>&1
        msg: "goreleaser not found. Install from https://goreleaser.com/install/"
    cmds:
      - goreleaser release --snapshot --clean --skip-publish

  release:local:
    desc: Build local artifacts with GoReleaser (build only)
    aliases:
      - rel:local
    preconditions:
      - sh: command -v goreleaser >/dev/null 2>&1
        msg: "goreleaser not found. Install from https://goreleaser.com/install/"
    cmds:
      - goreleaser build --snapshot --clean

  precommit:
    desc: Run pre-commit on all files
    aliases:
      - pc
    preconditions:
      - sh: command -v pre-commit >/dev/null 2>&1
        msg: "pre-commit not found. Install from https://pre-commit.com/#install"
    cmds:
      - pre-commit run -a
