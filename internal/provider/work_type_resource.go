// SPDX-License-Identifier: MPL-2.0

package provider

import (
	"context"
	"fmt"

	"github.com/ctreminiom/go-atlassian/v2/service/jira"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int32planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
)

var _ resource.Resource = (*workTypeResource)(nil)
var _ resource.ResourceWithValidateConfig = (*workTypeResource)(nil)
var _ resource.ResourceWithConfigure = (*workTypeResource)(nil)
var _ resource.ResourceWithImportState = (*workTypeResource)(nil)

// NewWorkTypeResource returns the Terraform resource implementation for jira_work_type.
func NewWorkTypeResource() resource.Resource {
	return &workTypeResource{}
}

type workTypeResource struct {
	baseJira
	typeService jira.TypeConnector
}

func (r *workTypeResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_work_type"
}

func (r *workTypeResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	provider, ok := req.ProviderData.(*JiraProvider)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected JiraProvider, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = provider.client
	r.typeService = provider.client.Issue.Type
	r.providerTimeouts = provider.providerTimeouts
}

func (r *workTypeResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
	var data workTypeResourceModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	hierarchyLevel := data.HierarchyLevel.ValueInt32()
	if hierarchyLevel != 0 && hierarchyLevel != -1 {
		resp.Diagnostics.AddAttributeError(
			path.Root("hierarchy_level"),
			"Hierarchy Level",
			fmt.Sprintf(
				"Hierarchy Level %d is not supported on Standard Jira. Allowed values on Standard: -1 (sub-task) or 0 (standard). Levels >= 1 (for example, 1 = Epic) require Jira Software Premium (Advanced Roadmaps). See Atlassian documentation: Issue type hierarchy: https://support.atlassian.com/jira-software-cloud/docs/issue-type-hierarchy/ and Configure issue type hierarchy: https://support.atlassian.com/jira-software-cloud/docs/configure-issue-type-hierarchy/. If you are on Premium, manage hierarchy levels in Jira admin and omit hierarchy_level in Terraform.",
				int(hierarchyLevel),
			),
		)
		return
	}
}

func (r *workTypeResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {

	resp.Schema = schema.Schema{
		MarkdownDescription: "Manages a Jira work type. Issue types are used to define the structure of different types of issues or work items in your Jira client.",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				MarkdownDescription: "The unique identifier of the work type. Automatically generated by Jira when the work type is created.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "The display name of the work type. This appears in the issue creation dialog and issue views.",
			},
			"icon_url": schema.StringAttribute{
				MarkdownDescription: "The URL of the work type's icon.",
				Computed:            true,
			},
			"description": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "A detailed description of the work type. This helps users understand the purpose and usage of this work type.",
			},
			"subtask": schema.BoolAttribute{
				Computed:            true,
				MarkdownDescription: "Indicates whether this work type is used for subtasks. When `true`, issues of this type can only be created as children of other issues.",
			},
			"avatar_id": schema.Int64Attribute{
				Computed:            true,
				MarkdownDescription: "The ID of the avatar for the work type.",
			},
			"hierarchy_level": schema.Int32Attribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.Int32{
					int32planmodifier.RequiresReplaceIfConfigured(),
				},
				MarkdownDescription: hierarchyDescription,
			},
		},
	}
}

func (r *workTypeResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	ctx, cancel := withTimeout(ctx, r.providerTimeouts.Create)
	defer cancel()
	CreateResource(ctx, req, resp, &workTypeResourceModel{}, r.typeService.Create)
}

func (r *workTypeResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	ctx, cancel := withTimeout(ctx, r.providerTimeouts.Read)
	defer cancel()
	ReadResource(ctx, req, resp, &workTypeResourceModel{}, r.typeService.Get)
}

func (r *workTypeResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	ctx, cancel := withTimeout(ctx, r.providerTimeouts.Update)
	defer cancel()
	UpdateResource(ctx, req, resp, &workTypeResourceModel{}, r.typeService.Update)
}

func (r *workTypeResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	ctx, cancel := withTimeout(ctx, r.providerTimeouts.Delete)
	defer cancel()
	DeleteResource(ctx, req, resp, &workTypeResourceModel{}, r.typeService.Delete)
}

func (r *workTypeResource) ImportState(ctx context.Context, request resource.ImportStateRequest, response *resource.ImportStateResponse) {
	ctx, cancel := withTimeout(ctx, r.providerTimeouts.Read)
	defer cancel()
	ImportResource(ctx, request, response, &workTypeResourceModel{}, r.typeService.Get)
}
